#!/usr/bin/env python3
"""
Workflow interactif pour traiter les espaces a√©riens XML-SIA
- Recherche par mot-cl√© avec list_entities.py
- S√©lection interactive des espaces
- V√©rification de pr√©sence en base
- Extraction XML et import en base
- G√©n√©ration KML

Usage:
    python workflow_espace.py --keyword "BOURGET"
    python workflow_espace.py --keyword "TMA" --source database
"""

import argparse
import sys
import os
import subprocess
from typing import List, Dict, Optional
import sqlite3

# Import des modules existants
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'extraction'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'utils'))  
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'generate_kml'))

from list_entities import EntitySearchService, SearchResult
from extract_espace import XsdBasedEspaceExtractor
from xml_importer import XMLImporter
from enhanced_extractor import EnhancedKMLExtractor

class WorkflowEspace:
    """
    Workflow interactif pour traiter les espaces a√©riens XML-SIA
    """
    
    def __init__(self, database_path: str = 'sia_database.db', 
                 xml_source: str = 'data-input/XML_SIA_2025-10-02.xml'):
        self.database_path = database_path
        self.xml_source = xml_source
        self.search_service = EntitySearchService(database_path, xml_source)
        self.processed_spaces = []
        
    def search_spaces(self, keyword: str) -> List[SearchResult]:
        """
        Recherche les espaces par mot-cl√© avec logique en cascade :
        1. Cherche d'abord dans la base de donn√©es
        2. Si pas trouv√©, cherche dans le XML source
        
        Args:
            keyword: Mot-cl√© de recherche
        
        Returns:
            Liste des espaces trouv√©s avec indication de la source
        """
        print(f"üîç Recherche des espaces avec le mot-cl√© '{keyword}'...")
        
        # 1. Recherche dans la base de donn√©es d'abord
        print("  üìä Recherche dans la base de donn√©es...")
        db_results = self.search_service.search_in_database(keyword)
        db_spaces = [r for r in db_results if r.entity_type == 'espace']
        
        if db_spaces:
            print(f"  ‚úÖ {len(db_spaces)} espace(s) trouv√©(s) dans la base")
            return db_spaces
        
        # 2. Si pas trouv√©, recherche dans le XML source
        print("  üìÑ Aucun r√©sultat en base, recherche dans le XML source...")
        xml_results = self.search_service.search_in_xml(keyword)
        xml_spaces = [r for r in xml_results if r.entity_type == 'espace']
        
        if xml_spaces:
            print(f"  ‚úÖ {len(xml_spaces)} espace(s) trouv√©(s) dans le XML")
            return xml_spaces
        
        print(f"  ‚ùå Aucun espace trouv√© avec le mot-cl√© '{keyword}' (ni en base ni dans le XML)")
        return []
    
    def display_spaces(self, spaces: List[SearchResult]):
        """Affiche la liste des espaces trouv√©s"""
        print("\nüìã Espaces trouv√©s:")
        print("=" * 80)
        for i, space in enumerate(spaces, 1):
            print(f"  {i:2d}. {space.lk} (PK: {space.pk})")
        print("=" * 80)
    
    def select_spaces(self, spaces: List[SearchResult]) -> List[SearchResult]:
        """
        S√©lection interactive des espaces √† traiter
        
        Args:
            spaces: Liste des espaces disponibles
        
        Returns:
            Liste des espaces s√©lectionn√©s
        """
        if not spaces:
            return []
        
        self.display_spaces(spaces)
        
        print("\nüéØ S√©lection des espaces √† traiter:")
        print("  - Entrez les num√©ros s√©par√©s par des virgules (ex: 1,3,5)")
        print("  - Tapez 'all' pour s√©lectionner tous les espaces")
        print("  - Tapez 'quit' pour annuler")
        
        while True:
            choice = input("\n‚û§ Votre choix: ").strip().lower()
            
            if choice == 'quit':
                print("‚ùå Op√©ration annul√©e")
                return []
            
            if choice == 'all':
                print(f"‚úÖ Tous les espaces s√©lectionn√©s ({len(spaces)})")
                return spaces
            
            try:
                # Parse des num√©ros s√©lectionn√©s
                indices = [int(x.strip()) for x in choice.split(',')]
                selected_spaces = []
                
                for idx in indices:
                    if 1 <= idx <= len(spaces):
                        selected_spaces.append(spaces[idx - 1])
                    else:
                        print(f"‚ö†Ô∏è Num√©ro invalide: {idx}")
                        continue
                
                if selected_spaces:
                    print(f"‚úÖ {len(selected_spaces)} espace(s) s√©lectionn√©(s)")
                    for space in selected_spaces:
                        print(f"  - {space.lk}")
                    return selected_spaces
                else:
                    print("‚ùå Aucun espace valide s√©lectionn√©")
                    
            except ValueError:
                print("‚ùå Format invalide. Utilisez des num√©ros s√©par√©s par des virgules")
    
    def check_space_in_database(self, space_lk: str) -> bool:
        """
        V√©rifie si un espace est d√©j√† pr√©sent dans la base de donn√©es
        
        Args:
            space_lk: Identifiant lk de l'espace
        
        Returns:
            True si l'espace est pr√©sent, False sinon
        """
        try:
            conn = sqlite3.connect(self.database_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM espaces WHERE lk = ?", (space_lk,))
            count = cursor.fetchone()[0]
            
            conn.close()
            return count > 0
            
        except sqlite3.Error as e:
            print(f"‚ùå Erreur lors de la v√©rification en base: {e}")
            return False
    
    def extract_and_import_space(self, space: SearchResult) -> bool:
        """
        Extrait un espace du XML source et l'importe en base
        
        Args:
            space: Espace √† traiter
        
        Returns:
            True si succ√®s, False sinon
        """
        print(f"\nüîÑ Traitement de l'espace: {space.lk}")
        
        # V√©rifier si d√©j√† en base
        if self.check_space_in_database(space.lk):
            print(f"  ‚ÑπÔ∏è  Espace d√©j√† pr√©sent en base")
            response = input("  ‚û§ Forcer la r√©-extraction ? (y/N): ").strip().lower()
            if response != 'y':
                print("  ‚è≠Ô∏è  Passage au suivant")
                return True
        
        try:
            # 1. Extraction XML
            print(f"  üì§ Extraction depuis {self.xml_source}...")
            
            try:
                extractor = XsdBasedEspaceExtractor(self.xml_source)
                
                # Charger le fichier XML
                if not extractor.load_xml():
                    print(f"    ‚úó Erreur lors du chargement du fichier XML: {self.xml_source}")
                    return False
                
                # G√©n√©rer nom de fichier de sortie
                output_filename = space.lk.replace('[', '').replace(']', '').replace(' ', '_')
                if not output_filename.endswith('.xml'):
                    output_filename += '.xml'
                output_path = os.path.join('data-output', output_filename)
                
                # Extraction
                print(f"    üîç Recherche de l'espace: {space.lk}")
                if not extractor.extract_espace_with_dependencies(space.lk):
                    print(f"  ‚ùå √âchec de l'extraction XML")
                    return False
                
                # G√©n√©rer et sauvegarder le XML extrait
                print(f"    üìù G√©n√©ration du XML...")
                xml_content = extractor.generate_output_xml()
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(xml_content)
                print(f"  ‚úÖ XML extrait vers: {output_path}")
                
            except Exception as extract_error:
                print(f"  ‚ùå Erreur d'extraction: {extract_error}")
                import traceback
                traceback.print_exc()
                return False
            
            # 2. Import en base SQLite
            print(f"  üì• Import dans la base SQLite...")
            try:
                importer = XMLImporter(self.database_path)
                
                if not importer.connect_database():
                    print(f"  ‚ùå √âchec de connexion √† la base")
                    return False
                
                if not importer.import_xml_file(output_path):
                    print(f"  ‚ùå √âchec de l'import en base")
                    return False
                
                print(f"  ‚úÖ Import termin√©")
                return True
                
            except Exception as import_error:
                print(f"  ‚ùå Erreur d'import: {import_error}")
                return False
            
        except Exception as e:
            print(f"  ‚ùå Erreur g√©n√©rale lors du traitement: {e}")
            return False
    
    def generate_kml_for_space(self, space_lk: str, use_cache: bool = True) -> bool:
        """
        G√©n√®re le fichier KML pour un espace avec cache optimis√©
        
        Args:
            space_lk: Identifiant lk de l'espace
            use_cache: Utiliser le cache par volume (d√©faut: True)
        
        Returns:
            True si succ√®s, False sinon
        """
        try:
            print(f"  üó∫Ô∏è  G√©n√©ration KML pour {space_lk}...")
            
            # Cr√©er l'extracteur KML avec cache
            kml_extractor = EnhancedKMLExtractor(self.database_path)
            
            if not kml_extractor.connect_database():
                print(f"  ‚ùå Impossible de se connecter √† la base")
                return False
            
            # G√©n√©rer le KML avec cache par volume
            if use_cache:
                kml_content = kml_extractor.extract_airspace_kml_cached(space_lk, force_regenerate=False)
            else:
                # Mode legacy sans cache
                airspace = kml_extractor.get_airspace_by_lk(space_lk)
                if not airspace:
                    print(f"  ‚ùå Espace non trouv√© en base: {space_lk}")
                    return False
                
                volumes = kml_extractor.get_volumes_for_airspace(airspace['pk'])
                if not volumes:
                    print(f"  ‚ö†Ô∏è  Aucun volume trouv√© pour l'espace")
                    return False
                
                kml_content = kml_extractor.create_kml_document(airspace, volumes)
            
            if not kml_content:
                print(f"  ‚ùå Impossible de g√©n√©rer le KML")
                return False
            
            # Nom de fichier KML
            kml_filename = space_lk.replace('[', '').replace(']', '').replace(' ', '_')
            if not kml_filename.endswith('.kml'):
                kml_filename += '.kml'
            kml_path = os.path.join('data-output', 'kml', kml_filename)
            
            # S'assurer que le dossier existe
            os.makedirs(os.path.dirname(kml_path), exist_ok=True)
            
            # Sauvegarder
            with open(kml_path, 'w', encoding='utf-8') as f:
                f.write(kml_content)
            
            file_size = len(kml_content.encode('utf-8'))
            print(f"  ‚úÖ KML g√©n√©r√©: {kml_path} ({file_size:,} octets)")
            
            # Afficher les statistiques de cache
            if use_cache:
                stats = kml_extractor.get_cache_statistics()
                session_stats = stats.get('session_stats', {})
                if session_stats.get('volumes_processed', 0) > 0:
                    cache_ratio = (session_stats.get('cache_hits', 0) / session_stats['volumes_processed']) * 100
                    print(f"  üìä Cache: {session_stats.get('cache_hits', 0)}/{session_stats['volumes_processed']} hits ({cache_ratio:.1f}%)")
            
            kml_extractor.close_connection()
            return True
            
        except Exception as e:
            print(f"  ‚ùå Erreur g√©n√©ration KML: {e}")
            return False
    
    def process_selected_spaces(self, selected_spaces: List[SearchResult]) -> bool:
        """
        Traite tous les espaces s√©lectionn√©s
        
        Args:
            selected_spaces: Liste des espaces √† traiter
        
        Returns:
            True si au moins un espace trait√© avec succ√®s
        """
        if not selected_spaces:
            return False
        
        print(f"\nüöÄ D√©but du traitement de {len(selected_spaces)} espace(s)")
        print("=" * 80)
        
        success_count = 0
        
        for i, space in enumerate(selected_spaces, 1):
            print(f"\n[{i}/{len(selected_spaces)}] üéØ Traitement: {space.lk}")
            
            # Extraction et import
            if self.extract_and_import_space(space):
                self.processed_spaces.append(space)
                success_count += 1
            else:
                print(f"  ‚ùå √âchec du traitement de {space.lk}")
        
        print(f"\nüìä R√©sum√© du traitement:")
        print(f"  ‚úÖ Succ√®s: {success_count}/{len(selected_spaces)}")
        print(f"  ‚ùå √âchecs: {len(selected_spaces) - success_count}/{len(selected_spaces)}")
        
        return success_count > 0
    
    def generate_all_kml(self) -> bool:
        """
        G√©n√®re les KML pour tous les espaces trait√©s
        
        Returns:
            True si au moins un KML g√©n√©r√©
        """
        if not self.processed_spaces:
            print("‚ö†Ô∏è  Aucun espace trait√©, pas de KML √† g√©n√©rer")
            return False
        
        print(f"\nüó∫Ô∏è  G√©n√©ration des fichiers KML pour {len(self.processed_spaces)} espace(s)")
        print("=" * 80)
        
        success_count = 0
        
        # D√©terminer si on utilise le cache (argument pass√© depuis main)
        use_cache = getattr(self, 'use_cache', True)
        
        for i, space in enumerate(self.processed_spaces, 1):
            print(f"\n[{i}/{len(self.processed_spaces)}]", end=" ")
            if self.generate_kml_for_space(space.lk, use_cache):
                success_count += 1
        
        print(f"\nüìä R√©sum√© g√©n√©ration KML:")
        print(f"  ‚úÖ Succ√®s: {success_count}/{len(self.processed_spaces)}")
        print(f"  ‚ùå √âchecs: {len(self.processed_spaces) - success_count}/{len(self.processed_spaces)}")
        
        return success_count > 0
    
    def run_workflow(self, keyword: str) -> bool:
        """
        Ex√©cute le workflow complet avec logique en cascade
        
        Args:
            keyword: Mot-cl√© de recherche
        
        Returns:
            True si workflow r√©ussi
        """
        print("üéØ Workflow de traitement des espaces XML-SIA")
        print("=" * 80)
        
        # 1. Recherche des espaces (base puis XML si n√©cessaire)
        spaces = self.search_spaces(keyword)
        if not spaces:
            return False
        
        # 2. S√©lection interactive
        selected_spaces = self.select_spaces(spaces)
        if not selected_spaces:
            return False
        
        # 3. Traitement (extraction + import)
        if not self.process_selected_spaces(selected_spaces):
            print("‚ùå Aucun espace trait√© avec succ√®s")
            return False
        
        # 4. G√©n√©ration KML
        if not self.generate_all_kml():
            print("‚ùå Aucun KML g√©n√©r√©")
            return False
        
        print("\nüéâ Workflow termin√© avec succ√®s!")
        return True

def main():
    parser = argparse.ArgumentParser(
        description="Workflow interactif pour traiter les espaces a√©riens XML-SIA",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples:
  python workflow_espace.py --keyword "CHEVREUSE"
  python workflow_espace.py --keyword "BOURGET" --no-cache
  python workflow_espace.py --keyword "PARIS" --xml-source "data-input/XML_SIA_2025-10-02.xml"

Le workflow recherche automatiquement :
  1. D'abord dans la base de donn√©es
  2. Si pas trouv√©, dans le fichier XML source
  3. Extrait et importe les espaces trouv√©s dans le XML
  4. G√©n√®re les KML avec cache par volume
        """
    )
    
    parser.add_argument('--keyword', type=str, required=True,
                       help='Mot-cl√© pour rechercher les espaces a√©riens')
    parser.add_argument('--database', type=str, default='sia_database.db',
                       help='Chemin vers la base SQLite (d√©faut: sia_database.db)')
    parser.add_argument('--xml-source', type=str, default='data-input/XML_SIA_2025-10-02.xml',
                       help='Fichier XML source (d√©faut: data-input/XML_SIA_2025-10-02.xml)')
    parser.add_argument('--no-cache', action='store_true',
                       help='D√©sactiver le cache KML par volume (mode legacy)')
    
    args = parser.parse_args()
    
    # V√©rifier les fichiers requis
    if not os.path.exists(args.xml_source):
        print(f"‚ùå Fichier XML source non trouv√©: {args.xml_source}")
        return 1
    
    if not os.path.exists(args.database):
        print(f"‚ö†Ô∏è Base de donn√©es non trouv√©e: {args.database}")
        print("   Le workflow pourra quand m√™me fonctionner avec le XML source")
    
    # Cr√©er et ex√©cuter le workflow
    workflow = WorkflowEspace(args.database, args.xml_source)
    workflow.use_cache = not args.no_cache  # Configurer l'usage du cache
    
    try:
        success = workflow.run_workflow(args.keyword)
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚ùå Op√©ration interrompue par l'utilisateur")
        return 1
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())